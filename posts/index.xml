<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on POLOXUE's BLOG</title><link>https://en.poloxue.com/posts/</link><description>Recent content in Posts on POLOXUE's BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Polo Xue All rights reserved</copyright><lastBuildDate>Thu, 25 Jan 2024 15:05:54 +0800</lastBuildDate><atom:link href="https://en.poloxue.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>The Go Developer's Guide to HTTP File Uploads using net/http Package</title><link>https://en.poloxue.com/posts/2019-12-10-golang-http-upload-file/</link><pubDate>Thu, 25 Jan 2024 15:05:54 +0800</pubDate><guid>https://en.poloxue.com/posts/2019-12-10-golang-http-upload-file/</guid><description>The previous post presented a comprehensive introduction to sending HTTP requests using Go&amp;rsquo;s net/http, covering all methods commonly used in daily scenarios. However, as the focus was primarily on usage, some topics, such as the implementation principles of HTTP file uploads, might still be challenging to understand without a deeper understanding of the underlying mechanics.
Today, based on this topic, we will delve into how Go implements file uploads.</description></item><item><title>How to Effectively Retrieve Go Variable Types? Exploring Multiple Methods</title><link>https://en.poloxue.com/posts/2024-01-22-get-the-type-of-object-in-golang/</link><pubDate>Mon, 22 Jan 2024 18:43:54 +0800</pubDate><guid>https://en.poloxue.com/posts/2024-01-22-get-the-type-of-object-in-golang/</guid><description>In Python, you can use type(x) to obtain the type of variable x. In JavaScript, typeof x returns the type of variable x. These operations are quite intuitive.
So, how do you quickly determine the type of a variable in Go?
Many beginners in Go might find themselves asking this question. This article will introduce several commonly used methods in Go to determine the type of a variable.
Go&amp;rsquo;s Type System In Go, each variable consists of two parts: type and value.</description></item><item><title>From Fatal Errors to sync.Map: Concurrency Strategies for Maps in Go.</title><link>https://en.poloxue.com/posts/2024-01-21-fatal-error-in-concurrent-accessing-map/</link><pubDate>Sun, 21 Jan 2024 17:15:14 +0800</pubDate><guid>https://en.poloxue.com/posts/2024-01-21-fatal-error-in-concurrent-accessing-map/</guid><description>Why does Go throw a fatal error, instead of a panic, when multiple goroutines concurrently access and modify the same map? This article will guide you through the underlying principles and introduce solutions to handle map concurrency issues in Go.
Map Data Race Firstly, let&amp;rsquo;s define a Map data race. It occurs when two or more goroutines access the same piece of data simultaneously without proper synchronization, and at least one of the goroutines modifies the data.</description></item><item><title>Exploring High-Efficiency int to string Conversion Strategies and Source Code in Go</title><link>https://en.poloxue.com/posts/2024-01-20-int-to-string-in-golang/</link><pubDate>Sat, 20 Jan 2024 17:47:23 +0800</pubDate><guid>https://en.poloxue.com/posts/2024-01-20-int-to-string-in-golang/</guid><description>In Go, converting an integer (int) to a string (string) is a common operation.
This post will introduce several common methods to convert int to string in Go, focusing on the performance characteristics of these methods. It will also delve into the efficient algorithm implementation of FormatInt.
Using strconv.Itoa The most direct and commonly used method is the Itoa function from the strconv package. Itoa is an abbreviation for &amp;ldquo;Integer to ASCII&amp;rdquo;.</description></item><item><title>IDE for Go Development: Exploring Features and Popular Options</title><link>https://en.poloxue.com/posts/2024-01-07-why-we-should-use-golang-ide/</link><pubDate>Sun, 07 Jan 2024 13:23:03 +0800</pubDate><guid>https://en.poloxue.com/posts/2024-01-07-why-we-should-use-golang-ide/</guid><description>Why do programmers need to use an IDE?&amp;quot;
This question frequently surfaces on various community forums. When it comes to whether one should use an Integrated Development Environment (IDE), everyone has their own viewpoint.
In the early days, programming didn&amp;rsquo;t necessitate an IDE as it was primarily centered around machine code. However, as the computer industry progressed, IDEs emerged to enhance engineering development efficiency.
It&amp;rsquo;s essential to grasp that an IDE primarily integrates various command tools into a user-friendly software, facilitating efficient programming practices.</description></item><item><title>MoviePy Basic Usage: Installation and Video Manipulation</title><link>https://en.poloxue.com/posts/2024-01-06-moving-basic-usage/</link><pubDate>Sat, 06 Jan 2024 00:09:46 +0800</pubDate><guid>https://en.poloxue.com/posts/2024-01-06-moving-basic-usage/</guid><description>In an era dominated by short-form videos, numerous user-friendly editing software options exist.
However, for specialized video formats like eBook presentations or comic readings, streamlining the video creation process through automation stands as a crucial enhancement for efficiency.
In this tutorial, we&amp;rsquo;ll delve into MoviePy, a Python library designed to automate video production processes. We&amp;rsquo;ll explore its capabilities and demonstrate how it simplifies video editing tasks through simple Python code.</description></item><item><title>Setup Your Own iTerm2 - Install iTerm2 and Configure Its Color Presets</title><link>https://en.poloxue.com/posts/2023-10-11-setup-your-own-iterm2/</link><pubDate>Thu, 12 Oct 2023 10:22:36 +0800</pubDate><guid>https://en.poloxue.com/posts/2023-10-11-setup-your-own-iterm2/</guid><description>Hi guys, This is POLO X.
Today, I plan to talk about how to install iTerm2 and configure iTerm2 color presets. At the end of the post, there will be some tips about iTerm2 to share with you.
What is iTerm2? Quote from the official site.
iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.14 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.</description></item><item><title>Autostart Tmux in iTerm2 - Improve Your Productivity</title><link>https://en.poloxue.com/posts/2023-09-15-autostart-tmux-in-iterm2/</link><pubDate>Fri, 15 Sep 2023 21:22:36 +0800</pubDate><guid>https://en.poloxue.com/posts/2023-09-15-autostart-tmux-in-iterm2/</guid><description>This post will introduce how to autostart Tmux when starting iTerm2.
By default, every time you start iTerm2, you need to enter tmux attach to enter tmux mode.
I use Tmux to manage workspaces for different projects. Common IDEs generally provide an interface for users to select projects. Naturally, can iTerm2 + Tmux have a similar function?
Very simple!
Solution 1: A single-line shell script First, let&amp;rsquo;s see a bash script:</description></item><item><title>Colly: A Comprehensive Guide to High-Performance Web Crawling in Go</title><link>https://en.poloxue.com/posts/2024-01-20-colly-guide-in-golang/</link><pubDate>Mon, 20 Jan 2020 18:43:59 +0800</pubDate><guid>https://en.poloxue.com/posts/2024-01-20-colly-guide-in-golang/</guid><description>Colly is a well-known web crawling framework implemented in Go, which is particularly suitable for high-concurrency and distributed scenarios - areas where web crawling technology thrives. Its primary attributes include being lightweight, fast, elegantly designed, and simple to distribute and extend.
This article, based on Colly&amp;rsquo;s official documentation, provides a guide to learning Colly as well as my personal insights into the framework.
How to Learn When it comes to web crawling frameworks, Python&amp;rsquo;s Scrapy is probably the most famous.</description></item><item><title>Diving Deep into Go's HTTP client using net/http: More Than Just Requests</title><link>https://en.poloxue.com/posts/2019-08-24-http-client-in-golang/</link><pubDate>Sat, 24 Aug 2019 15:07:32 +0800</pubDate><guid>https://en.poloxue.com/posts/2019-08-24-http-client-in-golang/</guid><description>This post will implement all examples from the quick start documentation of requests using Go, systematically learning the use of the http client. Despite being titled a quick start, the content is quite extensive.
Quick Start First, let&amp;rsquo;s make a GET request. The code is very simple, as shown below:
1 2 3 4 5 6 7 8 9 10 func get() { r, err := http.Get(&amp;#34;https://api.github.com/events&amp;#34;) if err !</description></item></channel></rss>